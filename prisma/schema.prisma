generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String
  email         String      @unique
  password      String
  role          UserRole
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  assignedTasks Task[]      @relation("AssignedTasks")
  createdTasks  Task[]      @relation("CreatedTasks")
  timeEntries   TimeEntry[]
}

model Task {
  id               String       @id @default(cuid())
  title            String
  description      String
  priority         TaskPriority
  status           TaskStatus   @default(OPEN)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  dueDate          DateTime?
  estimatedHours   Int?
  labels           String?
  stepsToReproduce String?
  expectedBehavior String?
  actualBehavior   String?
  environment      Environment?
  browser          String?
  operatingSystem  String?
  device           String?
  assigneeId       String
  creatorId        String
  attachments      Attachment[]
  assignee         User         @relation("AssignedTasks", fields: [assigneeId], references: [id])
  creator          User         @relation("CreatedTasks", fields: [creatorId], references: [id])
  timeEntries      TimeEntry[]
}

model TimeEntry {
  id        String    @id @default(cuid())
  startTime DateTime
  endTime   DateTime?
  duration  Int?
  taskId    String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  task      Task      @relation(fields: [taskId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  path      String
  size      Int
  mimeType  String
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
}

enum UserRole {
  DEVELOPER
  MANAGER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  PENDING_APPROVAL
  CLOSED
  REOPENED
}

enum Environment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}
